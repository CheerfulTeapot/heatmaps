#!/usr/bin/env python3
""" WARNING: DO NOT MODIFY THIS FILE
    IT IS AUTOMATICALLY GENERATED BY ../scigraph.py
    AND WILL BE OVERWRITTEN
    Swagger Version: 1.2, API Version: 1.0.1
    generated for http://matrix.neuinfo.org:9000/scigraph/api-docs
    by scigraph.py
"""
import requests

exten_mapping = {'application/xgmml': 'xgmml', 'text/plain': 'plain', 'text/plain; charset=utf-8': 'plain; charset=utf-8', 'text/tab-separated-values': 'tab-separated-values', 'image/jpeg': 'jpeg', 'text/html': 'html', 'text/csv': 'csv', 'text/gml': 'gml', 'application/json': 'json', 'application/xml': 'xml', 'application/graphson': 'graphson', 'image/png': 'png', 'application/graphml+xml': 'graphml+xml'}

class restService:
    """ Base class for SciGraph rest services. """

    def _get(self, method, url, output=None):
        print(url)
        s = requests.Session()
        req = requests.Request(method=method, url=url)
        if output:
            req.headers['Accept'] = output
        prep = req.prepare()
        resp = s.send(prep)
        if not resp.ok:
            return None
        elif resp.headers['content-type'] == 'application/json':
            return resp.json()
        elif resp.headers['content-type'].startswith('text/plain'):
            return resp.text
        else:
            return resp

    def _make_rest(self, default=None, **kwargs):
        kwargs = {k:v for k, v in kwargs.items() if v}
        param_rest = '&'.join(['%s={%s}' % (arg, arg) for arg in kwargs if arg != default])
        param_rest = '?' + param_rest if param_rest else param_rest
        return param_rest


class Graph(restService):
    """ Graph services """

    def __init__(self, basePath='http://matrix.neuinfo.org:9000/scigraph'):
        self._basePath = basePath

    def getProperties(self, callback=None, output='application/json'):
        """ Get all property keys from: /graph/properties

            Arguments:
            callback: Name of the JSONP callback ('fn' by default). Supplying this parameter or
            requesting a javascript media type will cause a JSONP response to be
            rendered.
            outputs:
                application/json
        """

        kwargs = {'callback':callback}
        param_rest = self._make_rest(None, **kwargs)
        url = self._basePath + ('/graph/properties' + param_rest).format(**kwargs)
        return self._get('GET', url, output)

    def getNode(self, id, project='*', callback=None, output='application/json'):
        """ Get all properties of a node from: /graph/{id}

            Arguments:
            id: This ID should be either a CURIE or an IRI
            project: Which properties to project. Defaults to '*'.
            callback: Name of the JSONP callback ('fn' by default). Supplying this parameter or
            requesting a javascript media type will cause a JSONP response to be
            rendered.
            outputs:
                application/json
                application/graphson
                application/xml
                application/graphml+xml
                application/xgmml
                text/gml
                text/csv
                text/tab-separated-values
                image/jpeg
                image/png
        """

        kwargs = {'id':id, 'project':project, 'callback':callback}
        param_rest = self._make_rest('id', **kwargs)
        url = self._basePath + ('/graph/{id}' + param_rest).format(**kwargs)
        return self._get('GET', url, output)

    def getEdges(self, type, entail='true', limit=100, skip=0, callback=None, output='application/json'):
        """ Get nodes connected by an edge type from: /graph/edges/{type}

            Arguments:
            type: The type of the edge
            entail: Should subproperties and equivalent properties be included
            limit: The number of edges to be returned
            skip: The number of edges to skip
            callback: Name of the JSONP callback ('fn' by default). Supplying this parameter or
            requesting a javascript media type will cause a JSONP response to be
            rendered.
            outputs:
                application/json
                application/graphson
                application/xml
                application/graphml+xml
                application/xgmml
                text/gml
                text/csv
                text/tab-separated-values
                image/jpeg
                image/png
        """

        kwargs = {'type':type, 'entail':entail, 'limit':limit, 'skip':skip, 'callback':callback}
        param_rest = self._make_rest('type', **kwargs)
        url = self._basePath + ('/graph/edges/{type}' + param_rest).format(**kwargs)
        return self._get('GET', url, output)

    def getRelationships(self, callback=None, output='application/json'):
        """ Get all relationship types from: /graph/relationship_types

            Arguments:
            callback: Name of the JSONP callback ('fn' by default). Supplying this parameter or
            requesting a javascript media type will cause a JSONP response to be
            rendered.
            outputs:
                application/json
        """

        kwargs = {'callback':callback}
        param_rest = self._make_rest(None, **kwargs)
        url = self._basePath + ('/graph/relationship_types' + param_rest).format(**kwargs)
        return self._get('GET', url, output)

    def getNeighbors(self, id, depth=1, blankNodes='false', relationshipType=None, direction='BOTH', project='*', callback=None, output='application/json'):
        """ Get neighbors from: /graph/neighbors/{id}

            Arguments:
            id: This ID should be either a CURIE or an IRI
            depth: How far to traverse neighbors
            blankNodes: Traverse blank nodes
            relationshipType: Which relationship to traverse
            direction: Which direction to traverse: INCOMING, OUTGOING, BOTH (default). Only used if relationshipType is specified.
            project: Which properties to project. Defaults to '*'.
            callback: Name of the JSONP callback ('fn' by default). Supplying this parameter or
            requesting a javascript media type will cause a JSONP response to be
            rendered.
            outputs:
                application/json
                application/graphson
                application/xml
                application/graphml+xml
                application/xgmml
                text/gml
                text/csv
                text/tab-separated-values
                image/jpeg
                image/png
        """

        kwargs = {'id':id, 'depth':depth, 'blankNodes':blankNodes, 'relationshipType':relationshipType, 'direction':direction, 'project':project, 'callback':callback}
        param_rest = self._make_rest('id', **kwargs)
        url = self._basePath + ('/graph/neighbors/{id}' + param_rest).format(**kwargs)
        return self._get('GET', url, output)

    def getNeighborsFromMultipleRoots(self, id, depth=1, blankNodes='false', relationshipType=None, direction='BOTH', project='*', callback=None, output='application/json'):
        """ Get neighbors from: /graph/neighbors

            Arguments:
            id: This ID should be either a CURIE or an IRI
            depth: How far to traverse neighbors
            blankNodes: Traverse blank nodes
            relationshipType: Which relationship to traverse
            direction: Which direction to traverse: INCOMING, OUTGOING, BOTH (default). Only used if relationshipType is specified.
            project: Which properties to project. Defaults to '*'.
            callback: Name of the JSONP callback ('fn' by default). Supplying this parameter or
            requesting a javascript media type will cause a JSONP response to be
            rendered.
            outputs:
                application/json
                application/graphson
                application/xml
                application/graphml+xml
                application/xgmml
                text/gml
                text/csv
                text/tab-separated-values
                image/jpeg
                image/png
        """

        kwargs = {'id':id, 'depth':depth, 'blankNodes':blankNodes, 'relationshipType':relationshipType, 'direction':direction, 'project':project, 'callback':callback}
        param_rest = self._make_rest('id', **kwargs)
        url = self._basePath + ('/graph/neighbors' + param_rest).format(**kwargs)
        return self._get('GET', url, output)


class Refine(restService):
    """ OpenRefine Reconciliation Services """

    def __init__(self, basePath='http://matrix.neuinfo.org:9000/scigraph'):
        self._basePath = basePath

    def suggestFromTerm_POST(self, query=None, queries=None):
        """ Reconcile terms from: /refine/reconcile

            Arguments:
            query: A call to a reconciliation service API
            for a single query looks like either
            of these:<ul><li>http://foo.com/bar/reconcile?query=...string...</li><li>http://foo.com/bar/reconcile?query={...json object literal...}</li></ul>If the query parameter
            is a string, then it's an abbreviation
            of <em>query={"query":...string...}</em>.<em>NOTE:</em> We encourage all API consumers
            to consider the single query mode <b>DEPRECATED</b>.Refine
            currently only uses the multiple query mode,
            but other consumers of the API may
            use the single query option since it
            was included in the spec.
            queries: A call to a standard reconciliation service API
            for multiple queries looks like this:<ul><li>http://foo.com/bar/reconcile?queries={...json object literal...}</li></ul>The
            json object literal has zero or more key/value
            pairs with arbitrary keys where the value is
            in the same format as a single query,
            e.g.<ul><li>http://foo.com/bar/reconcile?queries={ "q0" : { "query" : "foo" },
            "q1" : { "query" : "bar" } }</li></ul>"q0"
            and "q1" can be arbitrary strings.
        """

        kwargs = {'query':query, 'queries':queries}
        param_rest = self._make_rest(None, **kwargs)
        url = self._basePath + ('/refine/reconcile' + param_rest).format(**kwargs)
        return self._get('POST', url)

    def suggestFromTerm(self, query=None, queries=None, callback=None):
        """ Reconcile terms from: /refine/reconcile

            Arguments:
            query: A call to a reconciliation service API
            for a single query looks like either
            of these:<ul><li>http://foo.com/bar/reconcile?query=...string...</li><li>http://foo.com/bar/reconcile?query={...json object literal...}</li></ul>If the query parameter
            is a string, then it's an abbreviation
            of <em>query={"query":...string...}</em>.<em>NOTE:</em> We encourage all API consumers
            to consider the single query mode <b>DEPRECATED</b>.Refine
            currently only uses the multiple query mode,
            but other consumers of the API may
            use the single query option since it
            was included in the spec.
            queries: A call to a standard reconciliation service API
            for multiple queries looks like this:<ul><li>http://foo.com/bar/reconcile?queries={...json object literal...}</li></ul>The
            json object literal has zero or more key/value
            pairs with arbitrary keys where the value is
            in the same format as a single query,
            e.g.<ul><li>http://foo.com/bar/reconcile?queries={ "q0" : { "query" : "foo" },
            "q1" : { "query" : "bar" } }</li></ul>"q0"
            and "q1" can be arbitrary strings.
            callback: Name of the JSONP callback ('fn' by default). Supplying this parameter or
            requesting a javascript media type will cause a JSONP response to be
            rendered.
        """

        kwargs = {'query':query, 'queries':queries, 'callback':callback}
        param_rest = self._make_rest(None, **kwargs)
        url = self._basePath + ('/refine/reconcile' + param_rest).format(**kwargs)
        return self._get('GET', url)


class Analyzer(restService):
    """ Analysis services """

    def __init__(self, basePath='http://matrix.neuinfo.org:9000/scigraph'):
        self._basePath = basePath

    def enrich(self, sample, ontologyClass, path, callback=None, output='application/json'):
        """ Class Enrichment Service from: /analyzer/enrichment

            Arguments:
            sample: A list of CURIEs for nodes whose attributes are to be tested for enrichment. For example, a list of genes.
            ontologyClass: CURIE for parent ontology class for the attribute to be tested. For example, GO biological process
            path: A path expression that connects sample nodes to attribute class nodes
            callback: Name of the JSONP callback ('fn' by default). Supplying this parameter or
            requesting a javascript media type will cause a JSONP response to be
            rendered.
            outputs:
                application/json
        """

        kwargs = {'sample':sample, 'ontologyClass':ontologyClass, 'path':path, 'callback':callback}
        param_rest = self._make_rest('path', **kwargs)
        url = self._basePath + ('/analyzer/enrichment' + param_rest).format(**kwargs)
        return self._get('GET', url, output)


class Cypher(restService):
    """ Cypher utility services """

    def __init__(self, basePath='http://matrix.neuinfo.org:9000/scigraph'):
        self._basePath = basePath

    def resolve(self, cypherQuery, output='text/plain'):
        """ Cypher query resolver from: /cypher/resolve

            Arguments:
            cypherQuery: The cypher query to resolve
            outputs:
                text/plain
        """

        kwargs = {'cypherQuery':cypherQuery}
        param_rest = self._make_rest('cypherQuery', **kwargs)
        url = self._basePath + ('/cypher/resolve' + param_rest).format(**kwargs)
        return self._get('GET', url, output)


class Annotations(restService):
    """ Annotation services """

    def __init__(self, basePath='http://matrix.neuinfo.org:9000/scigraph'):
        self._basePath = basePath

    def getEntities(self, content, includeCat=None, excludeCat=None, minLength=4, longestOnly='false', includeAbbrev='false', includeAcronym='false', includeNumbers='false'):
        """ Get entities from text from: /annotations/entities

            Arguments:
            content: The content to annotate
            includeCat: A set of categories to include
            excludeCat: A set of categories to exclude
            minLength: The minimum number of characters in annotated entities
            longestOnly: Should only the longest entity be returned for an overlapping group
            includeAbbrev: Should abbreviations be included
            includeAcronym: Should acronyms be included
            includeNumbers: Should numbers be included
        """

        kwargs = {'content':content, 'includeCat':includeCat, 'excludeCat':excludeCat, 'minLength':minLength, 'longestOnly':longestOnly, 'includeAbbrev':includeAbbrev, 'includeAcronym':includeAcronym, 'includeNumbers':includeNumbers}
        param_rest = self._make_rest('content', **kwargs)
        url = self._basePath + ('/annotations/entities' + param_rest).format(**kwargs)
        return self._get('GET', url)

    def postEntities(self, content, includeCat=None, excludeCat=None, minLength=4, longestOnly='false', includeAbbrev='false', includeAcronym='false', includeNumbers='false'):
        """ Get entities from text from: /annotations/entities

            Arguments:
            content: The content to annotate
            includeCat: A set of categories to include
            excludeCat: A set of categories to exclude
            minLength: The minimum number of characters in annotated entities
            longestOnly: Should only the longest entity be returned for an overlapping group
            includeAbbrev: Should abbreviations be included
            includeAcronym: Should acronyms be included
            includeNumbers: Should numbers be included
        """

        kwargs = {'content':content, 'includeCat':includeCat, 'excludeCat':excludeCat, 'minLength':minLength, 'longestOnly':longestOnly, 'includeAbbrev':includeAbbrev, 'includeAcronym':includeAcronym, 'includeNumbers':includeNumbers}
        param_rest = self._make_rest('content', **kwargs)
        url = self._basePath + ('/annotations/entities' + param_rest).format(**kwargs)
        return self._get('POST', url)

    def annotate(self, content, includeCat=None, excludeCat=None, minLength=4, longestOnly='false', includeAbbrev='false', includeAcronym='false', includeNumbers='false', output='text/plain; charset=utf-8'):
        """ Annotate text from: /annotations

            Arguments:
            content: The content to annotate
            includeCat: A set of categories to include
            excludeCat: A set of categories to exclude
            minLength: The minimum number of characters in annotated entities
            longestOnly: Should only the longest entity be returned for an overlapping group
            includeAbbrev: Should abbreviations be included
            includeAcronym: Should acronyms be included
            includeNumbers: Should numbers be included
            outputs:
                text/plain; charset=utf-8
        """

        kwargs = {'content':content, 'includeCat':includeCat, 'excludeCat':excludeCat, 'minLength':minLength, 'longestOnly':longestOnly, 'includeAbbrev':includeAbbrev, 'includeAcronym':includeAcronym, 'includeNumbers':includeNumbers}
        param_rest = self._make_rest('content', **kwargs)
        url = self._basePath + ('/annotations' + param_rest).format(**kwargs)
        return self._get('GET', url, output)

    def annotatePost(self, content, includeCat=None, excludeCat=None, minLength=4, longestOnly='false', includeAbbrev='false', includeAcronym='false', includeNumbers='false', ignoreTag=None, stylesheet=None, scripts=None, targetId=None, targetClass=None):
        """ Annotate text from: /annotations

            Arguments:
            content: The content to annotate
            includeCat: A set of categories to include
            excludeCat: A set of categories to exclude
            minLength: The minimum number of characters in annotated entities
            longestOnly: Should only the longest entity be returned for an overlapping group
            includeAbbrev: Should abbreviations be included
            includeAcronym: Should acronyms be included
            includeNumbers: Should numbers be included
            ignoreTag: HTML tags that should not be annotated
            stylesheet: CSS stylesheets to add to the HEAD
            scripts: JavaScripts that should to add to the HEAD
            targetId: A set of element IDs to annotate
            targetClass: A set of CSS class names to annotate
        """

        kwargs = {'content':content, 'includeCat':includeCat, 'excludeCat':excludeCat, 'minLength':minLength, 'longestOnly':longestOnly, 'includeAbbrev':includeAbbrev, 'includeAcronym':includeAcronym, 'includeNumbers':includeNumbers, 'ignoreTag':ignoreTag, 'stylesheet':stylesheet, 'scripts':scripts, 'targetId':targetId, 'targetClass':targetClass}
        param_rest = self._make_rest('content', **kwargs)
        url = self._basePath + ('/annotations' + param_rest).format(**kwargs)
        return self._get('POST', url)

    def annotateUrl(self, url, includeCat=None, excludeCat=None, minLength=4, longestOnly='false', includeAbbrev='false', includeAcronym='false', includeNumbers='false', ignoreTag=None, stylesheet=None, scripts=None, targetId=None, targetClass=None, output='text/html'):
        """ Annotate a URL from: /annotations/url

            Arguments:
            url: 
            includeCat: A set of categories to include
            excludeCat: A set of categories to exclude
            minLength: The minimum number of characters in annotated entities
            longestOnly: Should only the longest entity be returned for an overlapping group
            includeAbbrev: Should abbreviations be included
            includeAcronym: Should acronyms be included
            includeNumbers: Should numbers be included
            ignoreTag: HTML tags that should not be annotated
            stylesheet: CSS stylesheets to add to the HEAD
            scripts: JavaScripts that should to add to the HEAD
            targetId: A set of element IDs to annotate
            targetClass: A set of CSS class names to annotate
            outputs:
                text/html
        """

        kwargs = {'url':url, 'includeCat':includeCat, 'excludeCat':excludeCat, 'minLength':minLength, 'longestOnly':longestOnly, 'includeAbbrev':includeAbbrev, 'includeAcronym':includeAcronym, 'includeNumbers':includeNumbers, 'ignoreTag':ignoreTag, 'stylesheet':stylesheet, 'scripts':scripts, 'targetId':targetId, 'targetClass':targetClass}
        param_rest = self._make_rest('url', **kwargs)
        url = self._basePath + ('/annotations/url' + param_rest).format(**kwargs)
        return self._get('GET', url, output)

    def getEntitiesAndContent(self, content, includeCat=None, excludeCat=None, minLength=4, longestOnly='false', includeAbbrev='false', includeAcronym='false', includeNumbers='false'):
        """ Get embedded annotations as well as a separate list from: /annotations/complete

            Arguments:
            content: The content to annotate
            includeCat: A set of categories to include
            excludeCat: A set of categories to exclude
            minLength: The minimum number of characters in annotated entities
            longestOnly: Should only the longest entity be returned for an overlapping group
            includeAbbrev: Should abbreviations be included
            includeAcronym: Should acronyms be included
            includeNumbers: Should numbers be included
        """

        kwargs = {'content':content, 'includeCat':includeCat, 'excludeCat':excludeCat, 'minLength':minLength, 'longestOnly':longestOnly, 'includeAbbrev':includeAbbrev, 'includeAcronym':includeAcronym, 'includeNumbers':includeNumbers}
        param_rest = self._make_rest('content', **kwargs)
        url = self._basePath + ('/annotations/complete' + param_rest).format(**kwargs)
        return self._get('GET', url)

    def postEntitiesAndContent(self, content, includeCat=None, excludeCat=None, minLength=4, longestOnly='false', includeAbbrev='false', includeAcronym='false', includeNumbers='false'):
        """ Get embedded annotations as well as a separate list from: /annotations/complete

            Arguments:
            content: The content to annotate
            includeCat: A set of categories to include
            excludeCat: A set of categories to exclude
            minLength: The minimum number of characters in annotated entities
            longestOnly: Should only the longest entity be returned for an overlapping group
            includeAbbrev: Should abbreviations be included
            includeAcronym: Should acronyms be included
            includeNumbers: Should numbers be included
        """

        kwargs = {'content':content, 'includeCat':includeCat, 'excludeCat':excludeCat, 'minLength':minLength, 'longestOnly':longestOnly, 'includeAbbrev':includeAbbrev, 'includeAcronym':includeAcronym, 'includeNumbers':includeNumbers}
        param_rest = self._make_rest('content', **kwargs)
        url = self._basePath + ('/annotations/complete' + param_rest).format(**kwargs)
        return self._get('POST', url)


class Lexical(restService):
    """ Lexical services """

    def __init__(self, basePath='http://matrix.neuinfo.org:9000/scigraph'):
        self._basePath = basePath

    def getChunks(self, text):
        """ Extract entities from text. from: /lexical/chunks

            Arguments:
            text: The text from which to extract chunks
        """

        kwargs = {'text':text}
        param_rest = self._make_rest('text', **kwargs)
        url = self._basePath + ('/lexical/chunks' + param_rest).format(**kwargs)
        return self._get('GET', url)

    def getEntities(self, text):
        """ Extract entities from text. from: /lexical/entities

            Arguments:
            text: The text from which to extract entities
        """

        kwargs = {'text':text}
        param_rest = self._make_rest('text', **kwargs)
        url = self._basePath + ('/lexical/entities' + param_rest).format(**kwargs)
        return self._get('GET', url)

    def getSentences(self, text):
        """ Split text into sentences. from: /lexical/sentences

            Arguments:
            text: The text to split
        """

        kwargs = {'text':text}
        param_rest = self._make_rest('text', **kwargs)
        url = self._basePath + ('/lexical/sentences' + param_rest).format(**kwargs)
        return self._get('GET', url)

    def getPos(self, text):
        """ Tag parts of speech. from: /lexical/pos

            Arguments:
            text: The text to tag
        """

        kwargs = {'text':text}
        param_rest = self._make_rest('text', **kwargs)
        url = self._basePath + ('/lexical/pos' + param_rest).format(**kwargs)
        return self._get('GET', url)


class Vocabulary(restService):
    """ Vocabulary services """

    def __init__(self, basePath='http://matrix.neuinfo.org:9000/scigraph'):
        self._basePath = basePath

    def getCategories(self):
        """ Get all categories from: /vocabulary/categories

            Arguments:

        """

        kwargs = {}
        param_rest = self._make_rest(None, **kwargs)
        url = self._basePath + ('/vocabulary/categories' + param_rest).format(**kwargs)
        return self._get('GET', url)

    def suggestFromTerm(self, term, limit=1):
        """ Suggest terms from: /vocabulary/suggestions/{term}

            Arguments:
            term: Mispelled term
            limit: Maximum result count
        """

        kwargs = {'term':term, 'limit':limit}
        param_rest = self._make_rest('term', **kwargs)
        url = self._basePath + ('/vocabulary/suggestions/{term}' + param_rest).format(**kwargs)
        return self._get('GET', url)

    def findByPrefix(self, term, limit=20, searchSynonyms='true', searchAbbreviations='false', searchAcronyms='false', includeDeprecated='false', category=None, prefix=None):
        """ Find a concept by its prefix from: /vocabulary/autocomplete/{term}

            Arguments:
            term: Term prefix to find
            limit: Maximum result count
            searchSynonyms: Should synonyms be matched
            searchAbbreviations: Should abbreviations be matched
            searchAcronyms: Should acronyms be matched
            includeDeprecated: Should deprecated classes be included
            category: Categories to search (defaults to all)
            prefix: CURIE prefixes to search (defaults to all)
        """

        kwargs = {'term':term, 'limit':limit, 'searchSynonyms':searchSynonyms, 'searchAbbreviations':searchAbbreviations, 'searchAcronyms':searchAcronyms, 'includeDeprecated':includeDeprecated, 'category':category, 'prefix':prefix}
        param_rest = self._make_rest('term', **kwargs)
        url = self._basePath + ('/vocabulary/autocomplete/{term}' + param_rest).format(**kwargs)
        return self._get('GET', url)

    def findByTerm(self, term, limit=20, searchSynonyms='true', searchAbbreviations='false', searchAcronyms='false', category=None, prefix=None):
        """ Find a concept from a term from: /vocabulary/term/{term}

            Arguments:
            term: Term to find
            limit: Maximum result count
            searchSynonyms: Should synonyms be matched
            searchAbbreviations: Should abbreviations be matched
            searchAcronyms: Should acronyms be matched
            category: Categories to search (defaults to all)
            prefix: CURIE prefixes to search (defaults to all)
        """

        kwargs = {'term':term, 'limit':limit, 'searchSynonyms':searchSynonyms, 'searchAbbreviations':searchAbbreviations, 'searchAcronyms':searchAcronyms, 'category':category, 'prefix':prefix}
        param_rest = self._make_rest('term', **kwargs)
        url = self._basePath + ('/vocabulary/term/{term}' + param_rest).format(**kwargs)
        return self._get('GET', url)

    def findById(self, id):
        """ Find a concept by its ID from: /vocabulary/id/{id}

            Arguments:
            id: ID to find
        """

        kwargs = {'id':id}
        param_rest = self._make_rest('id', **kwargs)
        url = self._basePath + ('/vocabulary/id/{id}' + param_rest).format(**kwargs)
        return self._get('GET', url)

    def searchByTerm(self, term, limit=20, searchSynonyms='true', searchAbbreviations='false', searchAcronyms='false', category=None, prefix=None):
        """ Find a concept from a term fragment from: /vocabulary/search/{term}

            Arguments:
            term: Term to find
            limit: Maximum result count
            searchSynonyms: Should synonyms be matched
            searchAbbreviations: Should abbreviations be matched
            searchAcronyms: Should acronyms be matched
            category: Categories to search (defaults to all)
            prefix: CURIE prefixes to search (defaults to all)
        """

        kwargs = {'term':term, 'limit':limit, 'searchSynonyms':searchSynonyms, 'searchAbbreviations':searchAbbreviations, 'searchAcronyms':searchAcronyms, 'category':category, 'prefix':prefix}
        param_rest = self._make_rest('term', **kwargs)
        url = self._basePath + ('/vocabulary/search/{term}' + param_rest).format(**kwargs)
        return self._get('GET', url)

    def getCuriePrefixes(self):
        """ Get all CURIE prefixes from: /vocabulary/prefixes

            Arguments:

        """

        kwargs = {}
        param_rest = self._make_rest(None, **kwargs)
        url = self._basePath + ('/vocabulary/prefixes' + param_rest).format(**kwargs)
        return self._get('GET', url)

